/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestbank;
import java.awt.HeadlessException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


/**
 *
 * @author root
 */
public class Operations extends javax.swing.JFrame {

    String poste;    
    int statut_operation=1;
 
   
    /**
     * Creates new form Operations
     */
     Connexion conn = new Connexion();
    Statement stat,stat2,stat3;
    ResultSet resp1,resp2;
    DefaultTableModel model = new DefaultTableModel();
    public Operations() {
        initComponents();
        this.jPanel_Operation.setVisible(true);
        this.jPanel_Depot.setVisible(false);
        this.jPanel_Rapport.setVisible(false);
        this.jPanel_Retrait.setVisible(false);
        this.jPanel_Virement.setVisible(false);
        this.jPanel_A_valider.setVisible(false);
        
        
        model.addColumn("ID Operation");
        model.addColumn("Type");
        model.addColumn("Date");
        model.addColumn("Montant");
        model.addColumn("Source");
        model.addColumn("Destination");
        
        
    }
    
    public Operations(String Poste) {
        
        poste=Poste;
        initComponents();
        this.jPanel_Operation.setVisible(true);
        this.jPanel_Depot.setVisible(false);
        this.jPanel_Rapport.setVisible(false);
        this.jPanel_Retrait.setVisible(false);
        this.jPanel_Virement.setVisible(false);
        this.jPanel_A_valider.setVisible(false);
        
        model.addColumn("ID Operation");
        model.addColumn("Type");
        model.addColumn("Date");
        model.addColumn("Montant");
        model.addColumn("Source");
        model.addColumn("Destination");
        
        if (poste.equals("Clientele")){
        this.jButton_A_Valider.setVisible(false);
        this.jButton_Depot.setVisible(false);
        this.jButton_Retrait.setVisible(false);
        }
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Operation = new javax.swing.JPanel();
        jButton_Virement = new javax.swing.JButton();
        jButton_Retrait = new javax.swing.JButton();
        jButton_Depot = new javax.swing.JButton();
        jButton_Rapport = new javax.swing.JButton();
        jButton_Retour = new javax.swing.JButton();
        jButton_A_Valider = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel_Virement = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        montant_virement = new javax.swing.JTextField();
        compte_debit = new javax.swing.JTextField();
        compte_credit = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton_annuler_virement = new javax.swing.JButton();
        jButton_Transferer = new javax.swing.JButton();
        jButton_Retour_Operation = new javax.swing.JButton();
        jPanel_Retrait = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        montant_retrait = new javax.swing.JTextField();
        compte_retrait = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton_annuler_retrait = new javax.swing.JButton();
        jButton_Retirer = new javax.swing.JButton();
        jButton_Retour_Operation1 = new javax.swing.JButton();
        jPanel_Depot = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        montant_depot = new javax.swing.JTextField();
        compte_depot = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton_annuler_retrait1 = new javax.swing.JButton();
        jButton_Deposer = new javax.swing.JButton();
        jButton_Retour_Operation2 = new javax.swing.JButton();
        jPanel_Rapport = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jButton_Retour_Operation3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Rapport_operation = new javax.swing.JTable();
        jPanel_A_valider = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jButton_Retour_Operation4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_operation_en_attente = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        ope_a_valider = new javax.swing.JTextField();
        jButton_autoriser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel_Operation.setBackground(java.awt.Color.white);

        jButton_Virement.setText("VIREMENT");
        jButton_Virement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_VirementActionPerformed(evt);
            }
        });

        jButton_Retrait.setText("RETRAIT");
        jButton_Retrait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RetraitActionPerformed(evt);
            }
        });

        jButton_Depot.setText("DEPOT");
        jButton_Depot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DepotActionPerformed(evt);
            }
        });

        jButton_Rapport.setText("RAPPORT");
        jButton_Rapport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RapportActionPerformed(evt);
            }
        });

        jButton_Retour.setText("RETOUR");
        jButton_Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RetourActionPerformed(evt);
            }
        });

        jButton_A_Valider.setText("A VALIDER");
        jButton_A_Valider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_A_ValiderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_OperationLayout = new javax.swing.GroupLayout(jPanel_Operation);
        jPanel_Operation.setLayout(jPanel_OperationLayout);
        jPanel_OperationLayout.setHorizontalGroup(
            jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_OperationLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton_A_Valider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Depot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Virement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addGroup(jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_Retrait, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Rapport, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(jButton_Retour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(69, 69, 69))
        );
        jPanel_OperationLayout.setVerticalGroup(
            jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_OperationLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Virement, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Retrait, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Depot, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Rapport, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_OperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_Retour, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_A_Valider, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Amiri", 1, 24)); // NOI18N
        jLabel1.setText("OPERATIONS");

        jPanel_Virement.setBackground(java.awt.Color.white);

        jLabel2.setText("Montant");

        jLabel3.setText("Compte Debit");

        jLabel4.setText("Compte Crédit");

        jLabel5.setFont(new java.awt.Font("Amiri", 1, 18)); // NOI18N
        jLabel5.setText("VIREMENT");

        jButton_annuler_virement.setText("Annuler");
        jButton_annuler_virement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_annuler_virementActionPerformed(evt);
            }
        });

        jButton_Transferer.setText("Valider");
        jButton_Transferer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_TransfererActionPerformed(evt);
            }
        });

        jButton_Retour_Operation.setText("Retour");
        jButton_Retour_Operation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Retour_OperationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_VirementLayout = new javax.swing.GroupLayout(jPanel_Virement);
        jPanel_Virement.setLayout(jPanel_VirementLayout);
        jPanel_VirementLayout.setHorizontalGroup(
            jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_VirementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_VirementLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(montant_virement)
                            .addComponent(compte_credit, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)))
                    .addGroup(jPanel_VirementLayout.createSequentialGroup()
                        .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(compte_debit, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_annuler_virement, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jButton_Transferer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Retour_Operation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_VirementLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_VirementLayout.setVerticalGroup(
            jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_VirementLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_VirementLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(montant_virement))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compte_debit, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel_VirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compte_credit, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_VirementLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(jButton_annuler_virement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Transferer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Retour_Operation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );

        jPanel_Retrait.setBackground(java.awt.Color.white);

        jLabel6.setText("Montant");

        jLabel7.setText("Compte Debit");

        jLabel9.setFont(new java.awt.Font("Amiri", 1, 18)); // NOI18N
        jLabel9.setText("RETRAIT");

        jButton_annuler_retrait.setText("Annuler");
        jButton_annuler_retrait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_annuler_retraitActionPerformed(evt);
            }
        });

        jButton_Retirer.setText("Valider");
        jButton_Retirer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RetirerActionPerformed(evt);
            }
        });

        jButton_Retour_Operation1.setText("Retour");
        jButton_Retour_Operation1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Retour_Operation1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_RetraitLayout = new javax.swing.GroupLayout(jPanel_Retrait);
        jPanel_Retrait.setLayout(jPanel_RetraitLayout);
        jPanel_RetraitLayout.setHorizontalGroup(
            jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RetraitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_RetraitLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(montant_retrait, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_RetraitLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(compte_retrait, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_annuler_retrait, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jButton_Retirer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Retour_Operation1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RetraitLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_RetraitLayout.setVerticalGroup(
            jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RetraitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_RetraitLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(montant_retrait, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_RetraitLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jButton_annuler_retrait, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_RetraitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_Retirer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compte_retrait, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Retour_Operation1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );

        jPanel_Depot.setBackground(java.awt.Color.white);

        jLabel8.setText("Montant");

        jLabel10.setText("Compte Depot");

        jLabel11.setFont(new java.awt.Font("Amiri", 1, 18)); // NOI18N
        jLabel11.setText("DEPOT");

        jButton_annuler_retrait1.setText("Annuler");
        jButton_annuler_retrait1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_annuler_retrait1ActionPerformed(evt);
            }
        });

        jButton_Deposer.setText("Valider");
        jButton_Deposer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeposerActionPerformed(evt);
            }
        });

        jButton_Retour_Operation2.setText("Retour");
        jButton_Retour_Operation2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Retour_Operation2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_DepotLayout = new javax.swing.GroupLayout(jPanel_Depot);
        jPanel_Depot.setLayout(jPanel_DepotLayout);
        jPanel_DepotLayout.setHorizontalGroup(
            jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DepotLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_DepotLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(montant_depot, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_DepotLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(compte_depot, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_annuler_retrait1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jButton_Deposer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Retour_Operation2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_DepotLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_DepotLayout.setVerticalGroup(
            jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DepotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_DepotLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(montant_depot, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_DepotLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jButton_annuler_retrait1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_DepotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_Deposer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compte_depot, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Retour_Operation2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );

        jPanel_Rapport.setBackground(java.awt.Color.white);

        jLabel14.setFont(new java.awt.Font("Amiri", 1, 18)); // NOI18N
        jLabel14.setText("RAPPORT");

        jButton_Retour_Operation3.setText("Retour");
        jButton_Retour_Operation3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Retour_Operation3ActionPerformed(evt);
            }
        });

        jTable_Rapport_operation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Operation", "Date", "Type", "Montant", "Source", "Destination"
            }
        ));
        jScrollPane1.setViewportView(jTable_Rapport_operation);

        javax.swing.GroupLayout jPanel_RapportLayout = new javax.swing.GroupLayout(jPanel_Rapport);
        jPanel_Rapport.setLayout(jPanel_RapportLayout);
        jPanel_RapportLayout.setHorizontalGroup(
            jPanel_RapportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RapportLayout.createSequentialGroup()
                .addContainerGap(283, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(283, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RapportLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_Retour_Operation3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RapportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel_RapportLayout.setVerticalGroup(
            jPanel_RapportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RapportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButton_Retour_Operation3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel_A_valider.setBackground(java.awt.Color.white);

        jLabel15.setFont(new java.awt.Font("Amiri", 1, 18)); // NOI18N
        jLabel15.setText("EN ATTENTE");

        jButton_Retour_Operation4.setText("Retour");
        jButton_Retour_Operation4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Retour_Operation4ActionPerformed(evt);
            }
        });

        jTable_operation_en_attente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Operation", "Date", "Type", "Montant", "Source", "Destination"
            }
        ));
        jScrollPane2.setViewportView(jTable_operation_en_attente);

        jLabel12.setText("ID Transaction");

        jButton_autoriser.setText("Autoriser");
        jButton_autoriser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_autoriserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_A_validerLayout = new javax.swing.GroupLayout(jPanel_A_valider);
        jPanel_A_valider.setLayout(jPanel_A_validerLayout);
        jPanel_A_validerLayout.setHorizontalGroup(
            jPanel_A_validerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_A_validerLayout.createSequentialGroup()
                .addContainerGap(283, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(283, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_A_validerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_Retour_Operation4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_A_validerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel_A_validerLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ope_a_valider, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jButton_autoriser, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_A_validerLayout.setVerticalGroup(
            jPanel_A_validerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_A_validerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(jPanel_A_validerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ope_a_valider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_autoriser))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButton_Retour_Operation4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_Operation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(231, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_Virement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Retrait, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Depot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Rapport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jPanel_A_valider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(12, 12, 12)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_Operation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 69, Short.MAX_VALUE)
                    .addComponent(jPanel_Virement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Retrait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(59, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Depot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(59, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Rapport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(59, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jPanel_A_valider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RetourActionPerformed
        // TODO add your handling code here:
        Menu menu = new Menu(poste);
        this.setVisible(false);
        menu.setVisible(true);
    }//GEN-LAST:event_jButton_RetourActionPerformed

    private void jButton_VirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_VirementActionPerformed
        // TODO add your handling code here:
        this.jPanel_Operation.setVisible(false);
        this.jPanel_Virement.setVisible(true);
    }//GEN-LAST:event_jButton_VirementActionPerformed

    private void jButton_RetraitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RetraitActionPerformed
        // TODO add your handling code here:
        this.jPanel_Operation.setVisible(false);
        this.jPanel_Retrait.setVisible(true);
    }//GEN-LAST:event_jButton_RetraitActionPerformed

    private void jButton_RapportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RapportActionPerformed
        try {
            // TODO add your handling code here:
            this.jPanel_Operation.setVisible(false);
            this.jPanel_Rapport.setVisible(true);
            
            
            model.setRowCount(0);
            String requete = ("select * from Operations where Statut=1");
            stat=conn.ObtenirConnexion().createStatement();
            resp1 = stat.executeQuery(requete);
            ResultSetMetaData metadata = resp1.getMetaData();
            while (resp1.next()) {
                model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});
                
            }
            jTable_Rapport_operation.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
        }
                            
    }//GEN-LAST:event_jButton_RapportActionPerformed

    private void jButton_DepotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DepotActionPerformed
        // TODO add your handling code here:
         this.jPanel_Operation.setVisible(false);
         this.jPanel_Depot.setVisible(true);
    }//GEN-LAST:event_jButton_DepotActionPerformed

    private void jButton_Retour_OperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Retour_OperationActionPerformed
        // TODO add your handling code here:
        this.jPanel_Virement.setVisible(false);
        this.jPanel_Operation.setVisible(true);
    }//GEN-LAST:event_jButton_Retour_OperationActionPerformed

    private void jButton_annuler_virementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_annuler_virementActionPerformed
        // TODO add your handling code here:
        montant_virement.setText("");
        compte_debit.setText("");
        compte_credit.setText("");
    }//GEN-LAST:event_jButton_annuler_virementActionPerformed

    private void jButton_Retour_Operation1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Retour_Operation1ActionPerformed
        // TODO add your handling code here:
        this.jPanel_Retrait.setVisible(false);
        this.jPanel_Operation.setVisible(true);                
    }//GEN-LAST:event_jButton_Retour_Operation1ActionPerformed

    private void jButton_annuler_retraitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_annuler_retraitActionPerformed
        // TODO add your handling code here:
        montant_retrait.setText("");
        compte_retrait.setText("");
    }//GEN-LAST:event_jButton_annuler_retraitActionPerformed

    private void jButton_annuler_retrait1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_annuler_retrait1ActionPerformed
        // TODO add your handling code here:
        montant_depot.setText("");
        compte_depot.setText("");
    }//GEN-LAST:event_jButton_annuler_retrait1ActionPerformed

    private void jButton_Retour_Operation2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Retour_Operation2ActionPerformed
        // TODO add your handling code here:
        this.jPanel_Depot.setVisible(false);
        this.jPanel_Operation.setVisible(true);
    }//GEN-LAST:event_jButton_Retour_Operation2ActionPerformed

    private void jButton_Retour_Operation3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Retour_Operation3ActionPerformed
        // TODO add your handling code here:
        this.jPanel_Rapport.setVisible(false);
        this.jPanel_Operation.setVisible(true);
    }//GEN-LAST:event_jButton_Retour_Operation3ActionPerformed

    private void jButton_TransfererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TransfererActionPerformed
        // TODO add your handling code here:
         
         
             float solde=0,decouvert=0,diff=0;
         if (montant_virement.getText().isEmpty() || compte_debit.getText().isEmpty() || compte_credit.getText().isEmpty())        {
            JOptionPane.showMessageDialog(null, "veuillez remplir tous les champs");
        } else {
             int compte_source = Integer.parseInt(compte_debit.getText());
             int compte_destination = Integer.parseInt(compte_credit.getText());
            
             String type=(""); 
             String type_transaction=("Virement");
             float montant=Float.parseFloat(montant_virement.getText());
            String requete1 = ("select * from COMPTE where (Num_compte="+compte_source+")");
            String requete2 = ("select * from COMPTE where (Num_compte="+compte_destination+")");
             try {
                    stat = conn.ObtenirConnexion().createStatement();
                    stat.executeQuery(requete1);
                    
                    resp1 = stat.executeQuery(requete1);
                    
                    ResultSetMetaData metadata = resp1.getMetaData();
                    String test;
                while (resp1.next()) {    
                    test = resp1.getString("Solde_compte");
                                      
                    solde = Float.parseFloat(test);
                                    
                    type=resp1.getString("Type_compte");
                    decouvert=Float.parseFloat(resp1.getString("Decouvert"));
                    diff=solde-montant;
                   
                }
                
                if(type.equals("")){                      
                         JOptionPane.showMessageDialog(null, "Ce compte n'existe pas");
                    }
                
                if(type.equals("Epargne")){
                    
                     if(diff<200000){
                      
                         JOptionPane.showMessageDialog(null, "Cette opération ne peut être effectuée. Fonds Insuffisants");
                    }
                     else{
                            float nouveau_solde=0;
                            try {
                            stat2=conn.ObtenirConnexion().createStatement();
                            stat2.executeQuery(requete2);
                            resp2 = stat2.executeQuery(requete2);
                            ResultSetMetaData metadata2 = resp2.getMetaData();
                            while(resp2.next()){
                                nouveau_solde=Float.parseFloat(resp2.getString("Solde_compte"));
                               
                            }
                            nouveau_solde=nouveau_solde + (Float.parseFloat(montant_virement.getText()));
                            solde=solde - (Float.parseFloat(montant_virement.getText()));
                            stat2.executeUpdate("update COMPTE set Solde_compte='"+nouveau_solde+"'"
                        + "where Num_compte='" + compte_destination + "'");
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte_source + "'");
                                  } catch (SQLException ex) {
                 Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
             }  finally{
                            try{
                                stat.close();
                                stat2.close();
                                resp1.close();
                                resp2.close();
                            
                            } catch (Exception e){}
                            }
                   
                           

                            DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                            //obtenir la date courante
                            Date date = new Date();                
                            
                            
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte_source +"','"+ compte_destination +"','"+ statut_operation +"')";
                            stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                     }
                }
                if(type.equals("Entreprise")){
                    
                     if(diff<0){                  
                         System.out.println(solde-Float.parseFloat(montant_virement.getText()));
                         if (diff < (0-decouvert)) 
                             { 
                                 
                         JOptionPane.showMessageDialog(null, "Cette opération ne peut être effectuée. Fonds Insuffisants");
                       }
                             else{
                                  float nouveau_solde = 0;
                                  stat2=conn.ObtenirConnexion().createStatement();
                            stat2.executeQuery(requete2);
                            resp2 = stat2.executeQuery(requete2);
                            ResultSetMetaData metadata2 = resp2.getMetaData();
                            while(resp2.next()){
                                nouveau_solde=Float.parseFloat(resp2.getString("Solde_compte"));
                               
                            }
                            nouveau_solde = nouveau_solde + (Float.parseFloat(montant_virement.getText()));
                            solde=solde - (Float.parseFloat(montant_virement.getText()));;
                            
                            stat2.executeUpdate("update COMPTE set Solde_compte='"+nouveau_solde+"'"
                        + "where Num_compte='" + compte_destination + "'");
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"', Decouvert='"+solde+"'"
                        + "where Num_compte='" + compte_source + "'");
                            
                              DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                                //obtenir la date courante
                                Date date = new Date();              
                             
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte_source +"','"+ compte_destination +"','"+ statut_operation +"')";stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                                
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                       
                                  
                                  }
                     }
                     else{
                            
                         float nouveau_solde=0;
                              stat2=conn.ObtenirConnexion().createStatement();
                            stat2.executeQuery(requete2);
                            resp2 = stat2.executeQuery(requete2);
                            ResultSetMetaData metadata2 = resp2.getMetaData();
                            
                           
                            while(resp2.next()){
                                nouveau_solde=Float.parseFloat(resp2.getString("Solde_compte"));
                            }
                            nouveau_solde=nouveau_solde + (Float.parseFloat(montant_virement.getText()));
                            solde=solde - (Float.parseFloat(montant_virement.getText()));
                            stat2.executeUpdate("update COMPTE set Solde_compte='"+nouveau_solde+"'"
                        + "where Num_compte='" + compte_destination + "'");
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte_source + "'");
                             stat2.close();
                             stat.close();
                    resp2.close();

                            
                             DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                            //obtenir la date courante
                            Date date = new Date();               
                              
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte_source +"','"+ compte_destination +"','"+ statut_operation +"')";stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                            
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                    
                     }
                }
                if(type.equals("Courant")){
                    if(diff<500000){
                        JOptionPane.showMessageDialog(null, "Cette opération ne peut être effectuée. Fonds Insuffisants");
                    }
                    else{
                            float nouveau_solde=0;
                              stat2=conn.ObtenirConnexion().createStatement();
                            stat2.executeQuery(requete2);
                            resp2 = stat2.executeQuery(requete2);
                            ResultSetMetaData metadata2 = resp2.getMetaData();
                            
                            while(resp2.next()){
                                nouveau_solde=Float.parseFloat(resp2.getString("Solde_compte"));
                            }
                            nouveau_solde = nouveau_solde + (Float.parseFloat(montant_virement.getText()));
                            solde=solde - (Float.parseFloat(montant_virement.getText()));
                            stat2.executeUpdate("update COMPTE set Solde_compte='"+nouveau_solde+"'"
                        + "where Num_compte='" + compte_destination + "'");
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte_source + "'");
                            
                               DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                                 //obtenir la date courante
                                Date date = new Date();             
                            
                                 
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte_source +"','"+ compte_destination +"','"+ statut_operation +"')";  stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                            
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                    
                    }
                }
             } catch (SQLException ex) {
                 Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
             }
           
             
             
         
            
            

           
                //vide tous les champs apres le insert
                
                montant_virement.setText(" ");
                compte_debit.setText("");
                compte_credit.setText("");
                
               
                

         }
    }//GEN-LAST:event_jButton_TransfererActionPerformed

    private void jButton_DeposerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeposerActionPerformed
        // TODO add your handling code here:
        if (montant_depot.getText().isEmpty() || compte_depot.getText().isEmpty())        {
            JOptionPane.showMessageDialog(null, "veuillez remplir tous les champs");
        }
        else{
            float solde=0;
            
             int compte = Integer.parseInt(compte_depot.getText());
                        
             String type=(""); 
             String type_transaction=("Depot");
             float montant=Float.parseFloat(montant_depot.getText());
             
             String requete = ("select * from COMPTE where (Num_compte="+compte+")");
              try{
                    stat = conn.ObtenirConnexion().createStatement();
                    stat.executeQuery(requete);
                    
                    resp1 = stat.executeQuery(requete);
                    
                    ResultSetMetaData metadata = resp1.getMetaData();
                    String test;
                while (resp1.next()) {    
                    test = resp1.getString("Solde_compte");
                    type = resp1.getString("Type_compte");
                                      
                    solde = Float.parseFloat(test);
                    
                          
                }
                
           
                if(type.equals("")){                      
                         JOptionPane.showMessageDialog(null, "Ce compte n'existe pas");
                    }
                else{
                solde = solde + montant;
                 stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte + "'");
                 int source=0;
                 
                  DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                                 //obtenir la date courante
                                Date date = new Date();  
                       
                            String requet = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ source +"','"+ compte +"','"+ statut_operation +"')";
                            stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requet);
                            
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                    
                }
                montant_depot.setText(" ");
                            compte_depot.setText("");
                    
        }catch (SQLException ex) {
                 Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
             }
            
        
            
        
        }
        
    }//GEN-LAST:event_jButton_DeposerActionPerformed

    private void jButton_RetirerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RetirerActionPerformed
        // TODO add your handling code here:
        
         float solde=0,decouvert=0,diff=0;
         if (montant_retrait.getText().isEmpty() || compte_retrait.getText().isEmpty())        {
            JOptionPane.showMessageDialog(null, "veuillez remplir tous les champs");
        } else {
             int compte = Integer.parseInt(compte_retrait.getText());
             
             
            
             String type=(""); 
             String type_transaction=("Retrait");
             float montant=Float.parseFloat(montant_retrait.getText());
             if(montant>=100000000){
                 statut_operation=0;
             }
            String requete1 = ("select * from COMPTE where (Num_compte="+compte+")");
            
             try {
                    stat = conn.ObtenirConnexion().createStatement();
                    stat.executeQuery(requete1);                    
                    resp1 = stat.executeQuery(requete1);                    
                    ResultSetMetaData metadata = resp1.getMetaData();
                    String test;
                while (resp1.next()) {    
                    test = resp1.getString("Solde_compte");                                      
                    solde = Float.parseFloat(test);                                    
                    type=resp1.getString("Type_compte");
                    decouvert=Float.parseFloat(resp1.getString("Decouvert"));
                    diff=solde-montant;
                   
                }
                
                if(type.equals("")){                      
                         JOptionPane.showMessageDialog(null, "Ce compte n'existe pas");
                    }
                
                if(type.equals("Epargne")){
                    
                     if(diff<200000){
                      
                         JOptionPane.showMessageDialog(null, "Cette opération ne peut être effectuée. Fonds Insuffisants");
                    }
                     else{
                            
                            try {
                                                
                            solde= solde - montant;
                        
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte + "'");
                                  } catch (SQLException ex) {
                 Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
             }  finally{
                            try{
                                stat.close();
                                stat2.close();
                                resp1.close();
                                resp2.close();
                            
                            } catch (Exception e){}
                            }
                   
                           

                            DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                            //obtenir la date courante
                            Date date = new Date();                
                            
                            int destination = 0;
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte +"','"+ destination +"','"+ statut_operation +"')";
                            stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations where Statut=1");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération ne peut effectuée!");
                     }
                }
                if(type.equals("Entreprise")){
                    
                     if(diff<0){                  
                         System.out.println(solde-Float.parseFloat(montant_retrait.getText()));
                         if (diff<(0-decouvert)) 
                             { 
                                 
                         JOptionPane.showMessageDialog(null, "Cette opération ne peut être effectuée. Fonds Insuffisants");
                       }
                             else{
                           
                            
                            solde=solde - montant;
                            int destination = 0;
                            
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte + "'");
                            
                              DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                                //obtenir la date courante
                                Date date = new Date();              
                             
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte +"','"+ destination +"','"+ statut_operation +"')";
                            stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                                
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                       
                                  
                                  }
                     }
                     else{
                            
                         
                              solde=solde - montant;
                          stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte + "'");
                           

                            int destination = 0;
                             DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                            //obtenir la date courante
                            Date date = new Date();               
                              
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte +"','"+ destination +"','"+ statut_operation +"')";
                            stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                            
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                    
                     }
                }
                if(type.equals("Courant")){
                    if(diff<500000){
                        JOptionPane.showMessageDialog(null, "Cette opération ne peut être effectuée. Fonds Insuffisants");
                    }
                    else{
                            
                            solde=solde - montant;
                         
                            stat.executeUpdate("update COMPTE set Solde_compte='"+solde+"'"
                        + "where Num_compte='" + compte + "'");
                            
                               DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
                                 //obtenir la date courante
                                Date date = new Date();             
                            int destination = 0;
                                 
                            String requete = "insert into Operations ('Type', 'Date', 'Montant', 'Source', 'Destination','Statut') values( '" + type_transaction + "','"+ date +"','"+ montant +"','"+ compte +"','"+ destination +"','"+ statut_operation +"')";
                            stat=conn.ObtenirConnexion().createStatement();
                            stat.executeUpdate(requete);
                            
                            
                             model.setRowCount(0);
                 requete = ("select * from Operations");
                resp1 = stat.executeQuery(requete);
                metadata = resp1.getMetaData();
                while (resp1.next()) {
                   model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});

                }
                jTable_Rapport_operation.setModel(model);
                            
                            
                            JOptionPane.showMessageDialog(null, "Opération effectuée!");
                    
                    }
                }
             } catch (SQLException ex) {
                 Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
             }
           
             
             
         
            
            

           
                //vide tous les champs apres le insert
                
                montant_retrait.setText(" ");
                compte_retrait.setText("");
         }
    }//GEN-LAST:event_jButton_RetirerActionPerformed

    private void jButton_Retour_Operation4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Retour_Operation4ActionPerformed
        // TODO add your handling code here:
        this.jPanel_A_valider.setVisible(false);
        this.jPanel_Operation.setVisible(true);
    }//GEN-LAST:event_jButton_Retour_Operation4ActionPerformed

    private void jButton_autoriserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_autoriserActionPerformed
        // TODO add your handling code here:
        if(ope_a_valider.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Veuillez Remplir tous les champs Merci");
        }
        else{
            statut_operation=1;
            int num = Integer.parseInt(ope_a_valider.getText());
            try {
                stat.executeUpdate("update Operations set Statut='"+statut_operation+"'" + "where ID='"+num+"'");
            
            model.setRowCount(0);
            String requete = ("select * from Operations where Statut=0");
            stat=conn.ObtenirConnexion().createStatement();
            resp1 = stat.executeQuery(requete);
            ResultSetMetaData metadata = resp1.getMetaData();
            while (resp1.next()) {
                model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});
                
            }
            jTable_operation_en_attente.setModel(model);
                
            } catch (SQLException ex) {
                Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
            }
      
        }
        
        
        
    }//GEN-LAST:event_jButton_autoriserActionPerformed

    private void jButton_A_ValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_A_ValiderActionPerformed
        // TODO add your handling code here:
        if(poste.equals("Caisse")){
        this.jPanel_Operation.setVisible(false);
        this.jPanel_Depot.setVisible(false);
        this.jPanel_Rapport.setVisible(false);
        this.jPanel_Retrait.setVisible(false);
        this.jPanel_Virement.setVisible(false);
        this.jPanel_A_valider.setVisible(true);
        
        this.jButton_A_Valider.setVisible(false);
        } else {
                  this.jPanel_Operation.setVisible(false);
                  this.jPanel_A_valider.setVisible(true);
                  this.jPanel_Depot.setVisible(false);
                  this.jPanel_Rapport.setVisible(false);
                  this.jPanel_Retrait.setVisible(false);
                  this.jPanel_Virement.setVisible(false);
       }
        try {
            // TODO add your handling code here:
            //this.jPanel_Operation.setVisible(false);
            //this.jPanel_Rapport.setVisible(true);
            
            
            model.setRowCount(0);
            String requete = ("select * from Operations where Statut=0");
            stat=conn.ObtenirConnexion().createStatement();
            resp1 = stat.executeQuery(requete);
            ResultSetMetaData metadata = resp1.getMetaData();
            while (resp1.next()) {
                model.addRow(new Object[]{resp1.getString("ID"), resp1.getString("Type"), resp1.getString("Date"),resp1.getString("Montant"),resp1.getString("Source"),resp1.getString("Destination")});
                
            }
            jTable_operation_en_attente.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Operations.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_jButton_A_ValiderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Operations().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField compte_credit;
    private javax.swing.JTextField compte_debit;
    private javax.swing.JTextField compte_depot;
    private javax.swing.JTextField compte_retrait;
    private javax.swing.JButton jButton_A_Valider;
    private javax.swing.JButton jButton_Deposer;
    private javax.swing.JButton jButton_Depot;
    private javax.swing.JButton jButton_Rapport;
    private javax.swing.JButton jButton_Retirer;
    private javax.swing.JButton jButton_Retour;
    private javax.swing.JButton jButton_Retour_Operation;
    private javax.swing.JButton jButton_Retour_Operation1;
    private javax.swing.JButton jButton_Retour_Operation2;
    private javax.swing.JButton jButton_Retour_Operation3;
    private javax.swing.JButton jButton_Retour_Operation4;
    private javax.swing.JButton jButton_Retrait;
    private javax.swing.JButton jButton_Transferer;
    private javax.swing.JButton jButton_Virement;
    private javax.swing.JButton jButton_annuler_retrait;
    private javax.swing.JButton jButton_annuler_retrait1;
    private javax.swing.JButton jButton_annuler_virement;
    private javax.swing.JButton jButton_autoriser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel_A_valider;
    private javax.swing.JPanel jPanel_Depot;
    private javax.swing.JPanel jPanel_Operation;
    private javax.swing.JPanel jPanel_Rapport;
    private javax.swing.JPanel jPanel_Retrait;
    private javax.swing.JPanel jPanel_Virement;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_Rapport_operation;
    private javax.swing.JTable jTable_operation_en_attente;
    private javax.swing.JTextField montant_depot;
    private javax.swing.JTextField montant_retrait;
    private javax.swing.JTextField montant_virement;
    private javax.swing.JTextField ope_a_valider;
    // End of variables declaration//GEN-END:variables
}
